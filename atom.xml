<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby on Training Wheels]]></title>
  <link href="http://mendelk.github.io/atom.xml" rel="self"/>
  <link href="http://mendelk.github.io/"/>
  <updated>2013-07-26T01:25:01-04:00</updated>
  <id>http://mendelk.github.io/</id>
  <author>
    <name><![CDATA[Mendel Kramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On the Internals of CanCan]]></title>
    <link href="http://mendelk.github.io/blog/2013/07/26/on-the-internals-of-cancan/"/>
    <updated>2013-07-26T01:15:00-04:00</updated>
    <id>http://mendelk.github.io/blog/2013/07/26/on-the-internals-of-cancan</id>
    <content type="html"><![CDATA[<p>Sometimes we forget that Ruby on Rails is in fact built on &hellip; Ruby. In this post, I want to explore the CanCan gem to see how it works its magic.</p>

<!--more-->


<hr />

<p>This post explores how the <a href="https://github.com/ryanb/cancan">CanCan</a> gem (v1.6.10) works internally. Lots of this applies to other gems as well.</p>

<p>If you&rsquo;re completely unfamiliar with CanCan, the authorization gem from <a href="http://twitter.com/rbates">Ryan Bates</a>, I highly recommend you look it up. Very briefly, this gem allows me to write code such as this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="n">can?</span> <span class="ss">:edit</span><span class="p">,</span> <span class="vi">@article</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= link_to &#39;Edit&#39;, edit_article_path(@article) %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>How simple is that?</p>

<p>On the flip side, the user abilities are defined like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Ability</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CanCan</span><span class="p">:</span><span class="ss">:Ability</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">can</span> <span class="ss">:edit</span><span class="p">,</span> <span class="no">Article</span><span class="p">,</span> <span class="n">author_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>user</code> param that you see passed into the <code>initialize</code> method is the result of querying a global <code>current_user</code> method.</p>

<p>It is your responsibility to create that method, and ensure it return the logged in user. Cancan handles <em>authorization</em>, not <em>authentication</em>.</p>

<p>In these lines of code, we allow the <code>current_user</code> to <code>:edit</code> an instance of the <code>Article</code> model <strong>if</strong> the <code>author_id</code> property on the Article matched the <code>id</code> of the user.</p>

<p>There are lot&rsquo;s of other options here, so read the well-written wiki.</p>

<p>Make sure you create this class, and name it <code>Ability</code>. CanCan relies on that convention.</p>

<p>So how does the magic happen? How do we have access to this new method <code>can?</code> (and <code>cannot?</code>).</p>

<p>As is the case of any gem, when you add <code>gem 'cancan'</code> to your Gemfile, and run <code>bundle</code>, ruby will fetch the gem source-code if doesn&rsquo;t exist on your system yet, and will load the file in the lib/GEM_NAME.rb, in this case <code>lib/cancan.rb</code>.</p>

<p>You&rsquo;ll see that this file simply requires the rest of the gem&rsquo;s code, all in the <code>lib</code> dir, namespaced under the <code>cancan</code> dir.</p>

<p>The first file required is <code>ability.rb</code>. This is the file that declares the <code>CanCan::Ability</code> module, which as seen before will get <code>included</code> in our <code>Ability</code> class.</p>

<p>The methods defined in this module are what we can call in our <code>Ability</code> file, such as <code>can :edit, Article, author_id: user.id</code>.</p>

<p>The next file, <code>rule.rb</code>, is what handles a lot of the dirty work under the hood. The methods in this file are all for internal use only. This gem has been designed so as to completely isolate code meant to be called directly (such as the <code>can</code> and <code>authorize</code> methods) from these methods, which are never meant to be directly referenced.</p>

<p>So it is with the next two required files, <code>controller_resource.rb</code> and <code>controller_additions.rb</code>, the former of which is the internal implemention of the latter. It is within this latter file that we see the <code>can?</code>, and other methods that get called within our views and controllers.</p>

<p>So how do we actually have access to these methods without adding any <code>include</code> or <code>extend</code> calls into our model or controller classes?</p>

<p>The magic happens in the last few lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="kp">include</span> <span class="ss">CanCan</span><span class="p">:</span><span class="ss">:ControllerAdditions</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This checks if we&rsquo;re using Active Record, and if we are, it <code>includes</code> this module into the <code>ActionController::Base</code>, the module which every Active Record model inherits from, thus responding to those method calls.</p>

<p>So that&rsquo;s the short of it. Although the wiki is very helpful, the inline documentation is more verbose, so if you get stuck, that might be a good place to start. Besides, code organization is a skill hard to pickup, and I&rsquo;m sure I&rsquo;ve learned something perusing this codebase, written by a programmer far more skilled than me. And, best of all, Rails is that much less magical. Magic != Fun.</p>

<p><img class="article-img" src="http://imgs.xkcd.com/comics/duty_calls.png"></p>

<p><em><a href="http://xkcd.com/386/">386 Duty Calls: What do you want me to do?  LEAVE?  Then they&rsquo;ll keep being wrong!</a></em></p>

<hr />

<p><em>All Revisions to this document are visible <a href="https://github.com/mendelk/mendelk.github.io/commits/master/blog/2013/07/26/on-the-internals-of-cancan/index.html">here</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns for Saving Associated Model Data in Rails]]></title>
    <link href="http://mendelk.github.io/blog/2013/07/18/patterns-for-saving-associated-model-data-in-rails/"/>
    <updated>2013-07-18T21:16:00-04:00</updated>
    <id>http://mendelk.github.io/blog/2013/07/18/patterns-for-saving-associated-model-data-in-rails</id>
    <content type="html"><![CDATA[<p>This is post explores different ways of saving data associated in some way to the view we&rsquo;re on.</p>

<!--more-->


<p>In each of these examples, we&rsquo;d like our controller&rsquo;s <code>create</code> and <code>update</code> actions to remain unchanged:</p>

<figure class='code'><figcaption><span>Default Controller Actions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ... other actions</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># POST /posts</span>
</span><span class='line'><span class="c1"># POST /posts.json</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Post was successfully created.&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:created</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="vi">@post</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;new&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@post</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># PUT /posts/1</span>
</span><span class='line'><span class="c1"># PUT /posts/1.json</span>
</span><span class='line'><span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="vi">@post</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;Post was successfully updated.&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:no_content</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;edit&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@post</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:unprocessable_entity</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Post Author</h2>

<p>Set up: We have <code>Posts</code>, each of which has an <code>Author</code> (O2M). In the <code>posts#new</code> view, we&rsquo;d like to choose which user to associate to this post as the author.</p>

<p>We can implement this using a drop-down and the <code>select</code> form helper.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= f.label :author_id %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">select</span> <span class="ss">:author_id</span><span class="p">,</span> <span class="no">Author</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="o">[</span> <span class="n">a</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">a</span><span class="o">.</span><span class="n">id</span> <span class="o">]</span> <span class="p">}</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to pass <code>:author_id</code> to the <code>Post</code> model&rsquo;s <code>attr_accessible</code>.</p>

<hr />

<h2>Post Categories</h2>

<p>Set up: We have <code>Posts</code> which on turn have many <code>Categories</code> (M2M). In the <code>posts#new</code> view, we&rsquo;d like to choose multiple categories to associate to this post.</p>

<p>We can implement this using a multi-select. This time, we&rsquo;ll use the <code>collection_select</code> helper.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= f.label :category_ids, &quot;Categories&quot; %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">collection_select</span> <span class="ss">:category_ids</span><span class="p">,</span> <span class="no">Category</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">),</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="p">{},</span> <span class="p">{</span><span class="ss">multiple</span><span class="p">:</span> <span class="kp">true</span><span class="p">}</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to pass <code>:category_ids</code> to the <code>Post</code> model&rsquo;s <code>attr_accessible</code>.</p>

<p>PS: This can be easily improved with the <a href="http://ivaynberg.github.io/select2/">Select2</a> library to great effect. (Also, see Bonus Section, below.)</p>

<hr />

<h2>Nested Form Within Form</h2>

<p>Set up: We have <code>Artists</code> which on turn have many <code>Songs</code> (O2M). In the <code>artists#show</code> view, we&rsquo;d like to create songs which will automatically be associated with this artist.</p>

<p>Many thanks to <a href="http://twitter.com/rbates">Ryan Bates</a> for much of the code in this example.</p>

<p>First, we&rsquo;ll specify in the <code>Artist</code> model that it can accept form attributed for a <code>Song</code>. We will also tell it that it can destroy song objects in its form (more on that in a minute).</p>

<figure class='code'><figcaption><span>artist.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Artist</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:songs_attributes</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:songs</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:songs</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when we post fields pertaining to songs together with our artist form data, rails will be able to figure out to create / update the song objects as well.</p>

<p>At this point, in our artist create / update form, we can add nested fields via the <code>fields_for</code> form helper, which we&rsquo;ll add in a partial.</p>

<figure class='code'><figcaption><span>_form.hmtl.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for(@artist) do |f| %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;%# error stuff ...  %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :name %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.fields_for :songs do |builder| %&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">render</span> <span class="s1">&#39;song_fields&#39;</span><span class="p">,</span> <span class="ss">f</span><span class="p">:</span> <span class="n">builder</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% end %&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;actions&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_song_fields.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">fieldset</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.label :name, &quot;Song Name&quot; %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="sx">%&gt;&lt;br /&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.check_box :_destroy %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:_destroy</span><span class="p">,</span> <span class="s2">&quot;Remove Song&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/fieldset&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re sharp, you&rsquo;ll notice that there&rsquo;s this checkbox with a <code>_destroy</code> name. This is a actually a special field in Rails. When this is checked (or otherwise evaluates to true), the associated model will get destroyed. This is specifically enabled by the <code>allow_destroy: true</code> which we passed to the <code>accepts_nested_attributes_for</code> method in <code>artist.rb</code>.</p>

<p>For this to work, we need to do one more thing, in the <code>new</code> action of the ArtistController, we need to add this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@artist</span><span class="o">.</span><span class="n">songs</span> <span class="o">&lt;&lt;</span> <span class="no">Song</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but presents us with some problems. What if we want to create more than one?</p>

<p>Well, we could do this: <code>3.times {@artist.songs &lt;&lt; Song.new}</code>, but that&rsquo;s not really solving the issue; now we&rsquo;re stuck creating three songs. We want to be able to add and remove any amount of songs. We also promised not to touch the controllers, a promise we just broke.</p>

<p>In <a href="http://railscasts.com/episodes/196-nested-model-form-revised">this episode</a>, we see how Ryan solves this problem:</p>

<p>First, remove the code we just added from the ArtistController. We&rsquo;re not changing any controllers, right?</p>

<p>In the form we edited a bit earlier, leave our changes, but add this:</p>

<figure class='code'><figcaption><span>Link to Add Song</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">link_to_add_fields</span> <span class="s2">&quot;Add Song&quot;</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="ss">:songs</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might be wondering why you never saw the <code>link_to_add_fields</code> method before. You haven&rsquo;t because it doesn&rsquo;t exist yet.</p>

<p>Lets create it. In your <code>application_helper.rb</code> file, add this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">link_to_add_fields</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">association</span><span class="p">)</span>
</span><span class='line'>  <span class="n">new_object</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">association</span><span class="p">)</span><span class="o">.</span><span class="n">klass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="nb">id</span> <span class="o">=</span> <span class="n">new_object</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'>  <span class="n">fields</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">fields_for</span><span class="p">(</span><span class="n">association</span><span class="p">,</span> <span class="n">new_object</span><span class="p">,</span> <span class="n">child_index</span><span class="p">:</span> <span class="nb">id</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">builder</span><span class="o">|</span>
</span><span class='line'>    <span class="n">render</span><span class="p">(</span><span class="n">association</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">singularize</span> <span class="o">+</span> <span class="s2">&quot;_fields&quot;</span><span class="p">,</span> <span class="ss">f</span><span class="p">:</span> <span class="n">builder</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">link_to</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;add_fields&quot;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="nb">id</span><span class="p">,</span> <span class="ss">fields</span><span class="p">:</span> <span class="n">fields</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a nutshell, this creates a link that embeds the  <code>Song</code> form in its <a href="http://ejohn.org/blog/html-5-data-attributes/">data attribute</a> the way it exists in a <code>_?_fields.html.erb</code> partial, where <code>?</code> is what you passed in as the third param, i.e. <code>songs</code>. We created this partial already, but this method will work for any nested resource, so long that you
name the partial correctly.</p>

<p>Once that done, all we have left to do is add the JS that will allow us to append the embedded form in to the DOM. We&rsquo;ll also change the delete field from a checkbox to a hidden field. Instead, we&rsquo;ll implement a &ldquo;Remove Song&rdquo; link, tied to which a &ldquo;click&rdquo; event handler will hide the form, and set the <code>_destroy</code> hidden field to true.</p>

<p>Let&rsquo;s do it!</p>

<figure class='code'><figcaption><span>artist.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">jQuery</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.remove_fields&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">prev</span><span class="p">(</span><span class="s1">&#39;input[type=hidden]&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;fieldset&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">on</span> <span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.add_fields&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">time</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">regexp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">),</span> <span class="s1">&#39;g&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;fields&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="nx">regexp</span><span class="p">,</span> <span class="nx">time</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our modified <code>_song_fields.html.erb</code> partial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">fieldset</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.label :name, &quot;Card Name&quot; %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="sx">%&gt;&lt;br /&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.hidden_field :_destroy %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Remove Card&quot;</span><span class="p">,</span> <span class="s1">&#39;#&#39;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;remove_fields&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/fieldset&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now, everything should work.</p>

<hr />

<h2>Bonus: Add New if Doesn&rsquo;t Exist with Select2</h2>

<p>This final example is a bit of a hack, and is merely used as an exercise.</p>

<p>Set up: We have <code>Recipes</code> which on turn have many <code>Ingredients</code> (M2M). In the <code>recipes#new</code> view, we&rsquo;d like to choose multiple ingredients to associate with this recipe, creating new ones if they don&rsquo;t exist. This assumes that <code>ingredient</code> names are unique.</p>

<p>This example depends on the <a href="http://ivaynberg.github.io/select2/">Select2</a> library, so download it and and put all it&rsquo;s files in your assets directory, paying attention that any images referenced in the CSS will be found.</p>

<p>In order to be able to use the Select2 <code>createSearchChoice</code> method (necessary to add new items) we&rsquo;ll need to operate on a hidden field. <strong>This will break the form for users that have JS disabled.</strong></p>

<p>Because the hidden field will submit a string of separated ids, plus new names, and the <code>ingredient_ids</code> \ <code>ingredient_ids=</code> methods expect an array, we will overwrite these methods in our model:</p>

<figure class='code'><figcaption><span>recipe.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Join our array to string, separating with an arbitrary, unlikely-to-be-used string</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ingredient_ids</span>
</span><span class='line'>  <span class="k">super</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;%%$$%%&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Put it back into an array, saving any non-integer strings as a new Ingredient</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ingredient_ids</span><span class="o">=</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span>
</span><span class='line'>  <span class="k">super</span> <span class="n">ids</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;%%$$%%&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="nb">id</span><span class="o">|</span> <span class="nb">id</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Integer</span><span class="p">)</span> <span class="o">||</span> <span class="nb">id</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="p">?</span> <span class="nb">id</span> <span class="p">:</span> <span class="no">Ingredient</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s add the hidden field to our form:</p>

<figure class='code'><figcaption><span>_form.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.label :ingredient_ids, &quot;Ingredients&quot; %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">hidden_field</span> <span class="ss">:ingredient_ids</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="ss">ingredients</span><span class="p">:</span> <span class="no">Ingredient</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="n">i</span><span class="o">.</span><span class="n">as_json</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:id</span><span class="p">,</span><span class="ss">:name</span><span class="o">]</span><span class="p">}}</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, finally, the CoffeeScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">jQuery</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">format</span> <span class="o">=</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#recipe_ingredient_ids&#39;</span><span class="p">).</span><span class="nx">select2</span>
</span><span class='line'>    <span class="nx">data</span><span class="o">:</span>
</span><span class='line'>      <span class="nx">results</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#recipe_ingredient_ids&#39;</span><span class="p">).</span><span class="nx">data</span> <span class="s2">&quot;ingredients&quot;</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;name&#39;</span>
</span><span class='line'>    <span class="nx">formatSelection</span><span class="o">:</span> <span class="nx">format</span>
</span><span class='line'>    <span class="nx">formatResult</span><span class="o">:</span> <span class="nx">format</span>
</span><span class='line'>    <span class="nx">multiple</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="nx">separator</span><span class="o">:</span> <span class="s1">&#39;%%$$%%&#39;</span>
</span><span class='line'>    <span class="nx">createSearchChoice</span><span class="o">:</span> <span class="p">(</span><span class="nx">term</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nx">id</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">term</span> <span class="o">+</span> <span class="s1">&#39; (new)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will populate the Select2 field with data that was embedded into the hidden field&rsquo;s <code>ingredients</code> data attribute. It will also use the <code>name</code> property, as the <code>text</code> property that Select2 requires.</p>

<p>See more details on the <a href="http://ivaynberg.github.io/select2/#documentation">Select2 Docs page</a>.</p>

<hr />

<p>That about wraps it up. Let me know if I missed any useful pattern!</p>

<p><img class="article-img" src="http://imgs.xkcd.com/comics/social_media.png"></p>

<p><em><a href="http://xkcd.com/1239/">1239: The social media reaction to this asteroid announcement has been sharply negative. Care to respond?</a></em></p>

<hr />

<p><em>All Revisions to this document are visible <a href="https://github.com/mendelk/mendelk.github.io/commits/master/blog/2013/07/18/patterns-for-saving-associated-model-data-in-rails/index.html">here</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sugar In Your Coffee]]></title>
    <link href="http://mendelk.github.io/blog/2013/07/01/sugar-in-your-coffee/"/>
    <updated>2013-07-01T20:50:00-04:00</updated>
    <id>http://mendelk.github.io/blog/2013/07/01/sugar-in-your-coffee</id>
    <content type="html"><![CDATA[<h3>JavaScript hurtin&#8217; your Ruby-biased mind? Maybe a little coffee &lsquo;n sugar is all you need!</h3>

<p>When it comes to improving upon JavaScript, we have plenty of choices. Here I look at two of them: <a href="http://coffeescript.org">CoffeeScript</a> and <a href="http://sugarjs.com/">SugarJS</a>.</p>

<!--more-->


<hr />

<blockquote><p>&ldquo;Learning JavaScript used to mean you weren&rsquo;t a serious software developer. Today, not learning JavaScript means the same thing.&rdquo;
&ndash; Tim O&#8217;Reilly</p></blockquote>

<p>These days, JavaScript is no longer an asset for a web-dev; it&rsquo;s an absolute requirement. Unfortunately, it has been said that JavaScript has bad parts. That has been said to be an understatement.</p>

<h4>Some History</h4>

<div class="img-box left">

  <a href="http://www.flickr.com/photos/johnkevinlin/361372379/" title="Netscape mug by John K. Lin, on Flickr"><img src="http://farm1.staticflickr.com/135/361372379_f0846bef13_m.jpg" width="240" height="192" alt="Netscape mug"></a>

</div>


<p>FWIW, this is not a judgment on Brendan Eich, who created JavaScript in 10 days back in May 1995. It was rushed out, rough edges and all, to preempt Microsoft&rsquo;s attempt at an even worse proprietary language of their own, during the era of the Browser Wars, which in turn became the quintessential proof to &ldquo;Always be Shipping!&rdquo;</p>

<p>As JavaScripts community grew to include devs from other languages and disciplines, solutions sprang up to alert the presence of, side-step, and, in the case of CoffeScript, even solve these bad parts.</p>

<p>While there is some overlap in these solutions (particularly while trying to &ldquo;shim&rdquo; ECMA support in legacy browsers such as IE8), generally speaking they take different direction.</p>

<h4>CoffeeScript</h4>

<div class="img-box right">

  <a href="http://www.flickr.com/photos/53464354@N07/5597025949/" title="coffee with sugar by photosven1, on Flickr"><img src="http://farm6.staticflickr.com/5305/5597025949_17194c6f4e_n.jpg" width="320" height="213" alt="coffee with sugar"></a>

</div>


<p><a href="http://coffeescript.org/">CoffeeScript</a> is a language created by Jeremy Ashkenas (creator of the BackboneJS project among many others) which compiles directly to JavaScript. This means, you can&rsquo;t serve <code>.coffee</code> files directly to the browser, rather it must first be <em>compiled</em> to a <code>.js</code> file first.</p>

<p>You can learn all about it on its homepage, where there&rsquo;s a tool to run CoffeeScript in real-time. I&rsquo;ll demonstrate just one example here. The basic tenets should be familiar to Rubyists:</p>

<ul>
<li>Parens are optional</li>
<li>Semi-colons are banished</li>
<li>Implicit <code>return</code> statements</li>
<li><em>Lots</em> of syntactic sugar</li>
</ul>


<!--more-->


<!--more-->


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'> <span class="nx">Functions</span> <span class="k">in</span> <span class="nx">CoffeeScript</span>
</span><span class='line'><span class="nv">logMsg = </span><span class="nf">(msg) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;LOG: </span><span class="si">#{</span><span class="nx">msg</span><span class="si">}</span><span class="s">&quot;</span> <span class="k">if</span> <span class="nx">loggingEnabled</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;compiles to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">logMsg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">logMsg</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">loggingEnabled</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;LOG: &quot;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SugarJS</h4>

<div class="img-box left">

  <a href="http://www.flickr.com/photos/mudmucks/2440675013/" title="Some coffee with your sugar sir? by mudmucks, on Flickr"><img src="http://farm3.staticflickr.com/2251/2440675013_2624534eb5_n.jpg" width="320" height="240" alt="Some coffee with your sugar sir?"></a>

</div>


<p><a href="http://sugarjs.com/">SugarJS</a> in it&rsquo;s own words</p>

<blockquote><p>&hellip; is a Javascript library that extends native objects with helpful methods. It is designed to be intuitive, unobtrusive, and let you do more with less code.</p></blockquote>

<p>It has lots in common with Ruby, and even has a <a href="http://sugarjs.com/libs/Ruby">comparison page</a> to see the syntactical differences between it and Ruby. So:</p>

<figure class='code'><figcaption><span>Ruby Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Count of Array Elements that are Odd:</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># Run Code n Times:</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SugarJS Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Count of Array Elements that are Odd:</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">count</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">isOdd</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// Run Code n Times:</span>
</span><span class='line'><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">times</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Plain Jane JS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Count of Array Elements that are Odd:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">result</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Run Code n Times:</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>All Together Now</h4>

<p>Because the fiat currency of the browser is JavaScript, as long as whichever shortcuts you use produce valid JavaScript, you can write code that intertwines all these examples.</p>

<figure class='code'><figcaption><span>CoffeeScript with a Dash of Sugar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app =</span>
</span><span class='line'>  <span class="nv">foods: </span><span class="p">[</span><span class="s">&#39;broccoli&#39;</span><span class="p">,</span> <span class="s">&#39;spinach&#39;</span><span class="p">,</span> <span class="s">&#39;chocolate&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">eatFoods: </span><span class="nf">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">food</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">()</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="nx">@foods</span> <span class="k">when</span> <span class="nx">food</span> <span class="o">isnt</span> <span class="s">&#39;chocolate&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">(e) -&gt;</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">eatFoods</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Equivalent JavaScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;broccoli&#39;</span><span class="p">,</span> <span class="s1">&#39;spinach&#39;</span><span class="p">,</span> <span class="s1">&#39;chocolate&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">eatFoods</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">food</span><span class="p">,</span> <span class="nx">_i</span><span class="p">,</span> <span class="nx">_len</span><span class="p">,</span> <span class="nx">_ref</span><span class="p">,</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_ref</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">foods</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_len</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;</span> <span class="nx">_len</span><span class="p">;</span> <span class="nx">_i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">food</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="nx">_i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">food</span> <span class="o">!==</span> <span class="s1">&#39;chocolate&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">food</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">rest</span> <span class="o">=</span> <span class="nx">food</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">foodCapitalized</span> <span class="o">=</span> <span class="nx">first</span> <span class="o">+</span> <span class="nx">rest</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">_results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foodCapitalized</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">app</span><span class="p">.</span><span class="nx">eatFoods</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>While there&rsquo;s obviously an improvement in these example over the plain JS, if you&rsquo;re having trouble understanding any of the plain JS code, you&rsquo;re doing it wrong. Debugging will be ever more difficult if you don&rsquo;t understand the &ldquo;magic&rdquo; in your code. (Anyone who has struggled with Rails and its particular form of magic can attest to this.) If you plan on writing client-heavy apps, there&rsquo;s is no escaping learning JavaScript thoroughly, warts and all.</p>

<h4>Conclusion</h4>

<p>Being currently a student of a dynamic language (Ruby) and the ever-growing popularity of this family of languages (i.e. Perl, Python, PHP etc), I may never get to write any non-trivial apps in a language that need to get compiled. As CoffeeScript may be the closest I get, and to satisfy the requirement of at least one XKCD reference, I leave you with this:</p>

<p><img class="article-img" src="http://imgs.xkcd.com/comics/compiling.png"></p>

<p><em><a href="http://xkcd.com/303/">303: &lsquo;Are you stealing those LCDs?&rsquo; &lsquo;Yeah, but I&rsquo;m doing it while my code compiles.&rsquo;</a></em></p>

<hr />

<p><em>All Revisions to this document are visible <a href="https://github.com/mendelk/mendelk.github.io/commits/master/blog/2013/07/01/sugar-in-your-coffee/index.html">here</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress vs. MVC]]></title>
    <link href="http://mendelk.github.io/blog/2013/06/13/wordpress-vs-mvc/"/>
    <updated>2013-06-13T17:23:00-04:00</updated>
    <id>http://mendelk.github.io/blog/2013/06/13/wordpress-vs-mvc</id>
    <content type="html"><![CDATA[<h3>Or: What Pretty Models Say About You</h3>

<p>In which I offer insight on the differences in data-model between the WordPress and MVC-like frameworks such as Rails, what led to them, and the implications for developing in them.</p>

<!--more-->


<hr />

<blockquote><p>Beauty and folly are old companions.
&ndash; Benjamin Franklin</p></blockquote>

<p>I&rsquo;ve recently begun learning Ruby-on-Rails, and thus would like to discuss its data-modeling philosophy, specifically vis-a-vis that of WordPress, with which I am more familiar.</p>

<h4>MVC</h4>

<div class="img-box left">

  <img class="article-img" src="http://mendelk.github.io/images/model-sign.jpg">

  <br>

  <span class="caption">Pretty Model Held by Woman</span>

</div>


<p><a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a> stands for Model-View-Controller.</p>

<p>If you&rsquo;ve built a Rails app before, you are already familiar with what that means. In short: <strong>Models</strong> are an abstraction of your data (think database tables). <strong>Controllers</strong> respond to user input, and manipulate your models based on their allowed behaviors , and render data that is easily consumed by your <strong>views</strong>, seen by the user.</p>

<p>In MVC, we try very hard such that our Models, and hence our database, are &ldquo;good&rdquo; abstractions of our domain. What constitutes &ldquo;good&rdquo; MVC architecture is a bit subjective, and perhaps more art than science.</p>

<p>All would agree, however, that looking at a well-constructed MVC data-model should give you a very good idea about the nature and behavior of the application.</p>

<p>It is in precisely this last point that WordPress most differs.</p>

<h4>The WordPress Data Model</h4>

<p>Out of the box, WordPress comes with <a href="http://codex.wordpress.org/Database_Description">11 tables</a>. I want to focus on two: the &ldquo;posts&rdquo; table, and the &ldquo;postmeta&rdquo; table.</p>

<p>&ldquo;Posts&rdquo; is a bit of a misnomer. In fact, the posts table is a general table for all types of objects. Where in MVC, you&rsquo;d create a &ldquo;products&rdquo; model/table, and a &ldquo;orders&rdquo; model/table, in WordPress, objects of both types would go into the &ldquo;posts&rdquo; table. They&rsquo;d be differentiated by the value in the &ldquo;post_type&rdquo; column, where one would presumably have the &ldquo;products&rdquo; value, while the other would have the value of &ldquo;orders&rdquo;.</p>

<p>Parenthetically, Rails uses a similar convention on a much smaller scale to overcome the lack of support for is_a-like inheritance in database tables (see: Single Table Inheritance).</p>

<p>If you&rsquo;ll look closer at the &ldquo;posts&rdquo; schema, you&rsquo;ll discover that its properties are essentially what any object would require. Kinda. It has properties such as &ldquo;date&rdquo;, &ldquo;date_modified&rdquo;. It also has lots of others that would not always be desired.</p>

<p>The &ldquo;postmeta&rdquo; table is essentially key-value pairings for any custom property your object may have that isn&rsquo;t covered in the &ldquo;posts&rdquo; table. Its schema is (id), post_id, key, and value. So, say your product has a &ldquo;price&rdquo; property, that would go into the postsmeta table like so: post_id = [the product id], key = price, value = [the product price].</p>

<p>In SQL this might be expressed like this: <code>SELECT * FROM posts, postmeta WHERE posts.id = postmeta.post_id</code>, which would return a table with all the properties of that object. (In practice, such a query would break, because the same post_id can have multiple values associated with the same key.)</p>

<h4>Why WordPress Chose Their Data Model</h4>

<div class="img-box right">

  <img class="article-img" src="http://imgs.xkcd.com/comics/physicists.png">

  <br>

  <span class="caption"><a href="http://xkcd.com/793/">XKCD: Physicists</a></span>

</div>


<p>If you look at the entire WordPress database schema, it becomes clear that, at least to begin with, WordPress designed their schema much like a Rails-dev would. Even the decision to keep posts and pages in one table can be justified in pure MVC.</p>

<p>But as WordPress moved farther away from being a tool tailored to blogging to being a general, multi-use CMS / E-commerce / Anything-you-want-it-to-be framework, the core team made the decision to keep 99% of the basic database structure. This is in line with the WordPress way of keeping updates, even major ones, extremely easy on the end-user, something major structural changes would preclude. That, in turn, has certainly been instrumental in making WordPress one of the most popular frameworks, powering some ~18% of the Internet. (Microsoft has adopted a similar strategy, with arguably <a href="http://www.quora.com/Microsoft-Windows/Why-do-people-hate-Windows/answer/Balaji-Viswanathan-2?srid=Xjjv&amp;share=1">worse results</a>. Or <a href="http://en.wikipedia.org/wiki/Usage_share_of_operating_systems">not</a>.)</p>

<h4>Implications</h4>

<p>Many things in the world of programming boil down to personal taste. As a <a href="http://avi.flombaum.com">great man</a> once said, &ldquo;There&rsquo;s no wrong way to do it!&rdquo; Personally, I disagree to an extent, but the point is clear.</p>

<p>Is developing with one data-model over another merely a matter of taste? I would say not. I would also posit that neither one is always right for the job, but they should be considered on a per-project basis.</p>

<p>My initial thoughts on each are so:</p>

<p>On the most simple of levels, the WordPress model is more flexible. Don&rsquo;t want to decide your objects&#8217; properties in advance? No problem. Want to format an entire form submission into json and save. Sure. Multiple values for one &ldquo;column&rdquo;, and return as array. You bet.</p>

<p>The price of that flexibility is paid in efficiency and hardiness. Clearly, queries which require a join run slower than those that don&rsquo;t (although the core team has done a remarkable job caching those queries, enabling WordPress installs that have millions of rows). Also, having constraints at the database level (this column value must be an integer, for example) will certainly be sturdier than the server-side constraints that have to be implemented for WordPress.</p>

<p>But I believe the biggest reason why someone would ultimately choose to go with Rails-like framework is not for the reasons mentioned above, but rather for reasons of beauty alone. A key-value schema is essentially formless. Good models must have form. Great models have great form. And the best are simply breathtakingly beautiful, and with that goes all reasons and reason.</p>

<hr />

<p><em>All Revisions to this document are visible <a href="https://github.com/mendelk/mendelk.github.io/commits/master/blog/2013/06/13/wordpress-vs-mvc/index.html">here</a></em></p>
]]></content>
  </entry>
  
</feed>
