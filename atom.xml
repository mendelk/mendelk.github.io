<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ruby on Training Wheels]]></title>
  <link href="http://mendelk.github.io/atom.xml" rel="self"/>
  <link href="http://mendelk.github.io/"/>
  <updated>2013-07-02T02:35:53-04:00</updated>
  <id>http://mendelk.github.io/</id>
  <author>
    <name><![CDATA[Mendel Kramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sugar In Your Coffee]]></title>
    <link href="http://mendelk.github.io/blog/2013/07/01/sugar-in-your-coffee/"/>
    <updated>2013-07-01T20:50:00-04:00</updated>
    <id>http://mendelk.github.io/blog/2013/07/01/sugar-in-your-coffee</id>
    <content type="html"><![CDATA[<h3>JavaScript hurtin&#8217; your Ruby-biased mind? Maybe a little coffee &lsquo;n sugar is all you need!</h3>

<p>When it comes to improving upon JavaScript, we have plenty of choices. Here I look at two of them: <a href="http://coffeescript.org">CoffeeScript</a> and <a href="http://sugarjs.com/">SugarJS</a>.</p>

<!--more-->


<hr />

<blockquote><p>&ldquo;Learning JavaScript used to mean you weren&rsquo;t a serious software developer. Today, not learning JavaScript means the same thing.&rdquo;
&ndash; Tim O&#8217;Reilly</p></blockquote>

<p>These days, JavaScript is no longer an asset for a web-dev; it&rsquo;s an absolute requirement. Unfortunately, it has been said that JavaScript has bad parts. That has been said to be an understatement.</p>

<h4>Some History</h4>

<div class="img-box left">

  <a href="http://www.flickr.com/photos/johnkevinlin/361372379/" title="Netscape mug by John K. Lin, on Flickr"><img src="http://farm1.staticflickr.com/135/361372379_f0846bef13_m.jpg" width="240" height="192" alt="Netscape mug"></a>

</div>


<p>FWIW, this is not a judgment on Brendan Eich, who created JavaScript in 10 days back in May 1995. It was rushed out, rough edges and all, to preempt Microsoft&rsquo;s attempt at an even worse proprietary language of their own, during the era of the Browser Wars, which in turn became the quintessential proof to &ldquo;Always be Shipping!&rdquo;</p>

<p>As JavaScripts community grew to include devs from other languages and disciplines, solutions sprang up to alert the presence of, side-step, and, in the case of CoffeScript, even solve these bad parts.</p>

<p>While there is some overlap in these solutions (particularly while trying to &ldquo;shim&rdquo; ECMA support in legacy browsers such as IE8), generally speaking they take different direction.</p>

<h4>CoffeeScript</h4>

<div class="img-box right">

  <a href="http://www.flickr.com/photos/53464354@N07/5597025949/" title="coffee with sugar by photosven1, on Flickr"><img src="http://farm6.staticflickr.com/5305/5597025949_17194c6f4e_n.jpg" width="320" height="213" alt="coffee with sugar"></a>

</div>


<p><a href="http://coffeescript.org/">CoffeeScript</a> is a language created by Jeremy Ashkenas (creator of the BackboneJS project among many others) which compiles directly to JavaScript. This means, you can&rsquo;t serve <code>.coffee</code> files directly to the browser, rather it must first be <em>compiled</em> to a <code>.js</code> file first.</p>

<p>You can learn all about it on its homepage, where there&rsquo;s a tool to run CoffeeScript in real-time. I&rsquo;ll demonstrate just one example here. The basic tenets should be familiar to Rubyists:</p>

<ul>
<li>Parens are optional</li>
<li>Semi-colons are banished</li>
<li>Implicit <code>return</code> statements</li>
<li><em>Lots</em> of syntactic sugar</li>
</ul>


<figure class='code'><figcaption><span>Functions in CoffeeScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">logMsg = </span><span class="nf">(msg) -&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;LOG: </span><span class="si">#{</span><span class="nx">msg</span><span class="si">}</span><span class="s">&quot;</span> <span class="k">if</span> <span class="nx">loggingEnabled</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;compiles to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">logMsg</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">logMsg</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">loggingEnabled</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;LOG: &quot;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>SugarJS</h4>

<div class="img-box left">

  <a href="http://www.flickr.com/photos/mudmucks/2440675013/" title="Some coffee with your sugar sir? by mudmucks, on Flickr"><img src="http://farm3.staticflickr.com/2251/2440675013_2624534eb5_n.jpg" width="320" height="240" alt="Some coffee with your sugar sir?"></a>

</div>


<p><a href="http://sugarjs.com/">SugarJS</a> in it&rsquo;s own words</p>

<blockquote><p>&hellip; is a Javascript library that extends native objects with helpful methods. It is designed to be intuitive, unobtrusive, and let you do more with less code.</p></blockquote>

<p>It has lots in common with Ruby, and even has a <a href="http://sugarjs.com/libs/Ruby">comparison page</a> to see the syntactical differences between it and Ruby. So:</p>

<figure class='code'><figcaption><span>Ruby Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Count of Array Elements that are Odd:</span>
</span><span class='line'><span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># Run Code n Times:</span>
</span><span class='line'><span class="mi">10</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">n</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>SugarJS Syntax</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Count of Array Elements that are Odd:</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">count</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">n</span><span class="p">.</span><span class="nx">isOdd</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// Run Code n Times:</span>
</span><span class='line'><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="nx">times</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Plain Jane JS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Count of Array Elements that are Odd:</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="nx">result</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="c1">// Run Code n Times:</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>All Together Now</h4>

<p>Because the fiat currency of the browser is JavaScript, as long as whichever shortcuts you use produce valid JavaScript, you can write code that intertwines all these examples.</p>

<figure class='code'><figcaption><span>CoffeeScript with a Dash of Sugar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">app =</span>
</span><span class='line'>  <span class="nv">foods: </span><span class="p">[</span><span class="s">&#39;broccoli&#39;</span><span class="p">,</span> <span class="s">&#39;spinach&#39;</span><span class="p">,</span> <span class="s">&#39;chocolate&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">eatFoods: </span><span class="nf">-&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">food</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">()</span> <span class="k">for</span> <span class="nx">food</span> <span class="k">in</span> <span class="nx">@foods</span> <span class="k">when</span> <span class="nx">food</span> <span class="o">isnt</span> <span class="s">&#39;chocolate&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">(e) -&gt;</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">eatFoods</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Equivalent JavaScript</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foods</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;broccoli&#39;</span><span class="p">,</span> <span class="s1">&#39;spinach&#39;</span><span class="p">,</span> <span class="s1">&#39;chocolate&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">eatFoods</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">food</span><span class="p">,</span> <span class="nx">_i</span><span class="p">,</span> <span class="nx">_len</span><span class="p">,</span> <span class="nx">_ref</span><span class="p">,</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_ref</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">foods</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">_results</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">_i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_len</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">_i</span> <span class="o">&lt;</span> <span class="nx">_len</span><span class="p">;</span> <span class="nx">_i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">food</span> <span class="o">=</span> <span class="nx">_ref</span><span class="p">[</span><span class="nx">_i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">food</span> <span class="o">!==</span> <span class="s1">&#39;chocolate&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">first</span> <span class="o">=</span> <span class="nx">food</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">rest</span> <span class="o">=</span> <span class="nx">food</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">foodCapitalized</span> <span class="o">=</span> <span class="nx">first</span> <span class="o">+</span> <span class="nx">rest</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">_results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foodCapitalized</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_results</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">app</span><span class="p">.</span><span class="nx">eatFoods</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>While there&rsquo;s obviously an improvement in these example over the plain JS, if you&rsquo;re having trouble understanding any of the plain JS code, you&rsquo;re doing it wrong. Debugging will be ever more difficult if you don&rsquo;t understand the &ldquo;magic&rdquo; in your code. (Anyone who has struggled with Rails and its particular form of magic can attest to this.) If you plan on writing client-heavy apps, there&rsquo;s is no escaping learning JavaScript thoroughly, warts and all.</p>

<h4>Conclusion</h4>

<p>Being currently a student of a dynamic language (Ruby) and the ever-growing popularity of this family of languages (i.e. Perl, Python, PHP etc), I may never get to write any non-trivial apps in a language that need to get compiled. As CoffeeScript may be the closest I get, and to satisfy the requirement of at least one XKCD reference, I leave you with this:</p>

<p><img class="article-img" src="http://imgs.xkcd.com/comics/compiling.png"></p>

<p><em><a href="http://xkcd.com/303/">303: &lsquo;Are you stealing those LCDs?&rsquo; &lsquo;Yeah, but I&rsquo;m doing it while my code compiles.&rsquo;</a></em></p>

<hr />

<p><em>All Revisions to this document are visible <a href="https://github.com/mendelk/mendelk.github.io/commits/master/blog/2013/07/01/sugar-in-your-coffee/index.html">here</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress vs. MVC]]></title>
    <link href="http://mendelk.github.io/blog/2013/06/13/wordpress-vs-mvc/"/>
    <updated>2013-06-13T17:23:00-04:00</updated>
    <id>http://mendelk.github.io/blog/2013/06/13/wordpress-vs-mvc</id>
    <content type="html"><![CDATA[<h3>Or: What Pretty Models Say About You</h3>

<p>In which I offer insight on the differences in data-model between the WordPress and MVC-like frameworks such as Rails, what led to them, and the implications for developing in them.</p>

<!--more-->


<hr />

<blockquote><p>Beauty and folly are old companions.
&ndash; Benjamin Franklin</p></blockquote>

<p>I&rsquo;ve recently begun learning Ruby-on-Rails, and thus would like to discuss its data-modeling philosophy, specifically vis-a-vis that of WordPress, with which I am more familiar.</p>

<h4>MVC</h4>

<div class="img-box left">

  <img class="article-img" src="http://mendelk.github.io/images/model-sign.jpg">

  <br>

  <span class="caption">Pretty Model Held by Woman</span>

</div>


<p><a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">MVC</a> stands for Model-View-Controller.</p>

<p>If you&rsquo;ve built a Rails app before, you are already familiar with what that means. In short: <strong>Models</strong> are an abstraction of your data (think database tables). <strong>Controllers</strong> respond to user input, and manipulate your models based on their allowed behaviors , and render data that is easily consumed by your <strong>views</strong>, seen by the user.</p>

<p>In MVC, we try very hard such that our Models, and hence our database, are &ldquo;good&rdquo; abstractions of our domain. What constitutes &ldquo;good&rdquo; MVC architecture is a bit subjective, and perhaps more art than science.</p>

<p>All would agree, however, that looking at a well-constructed MVC data-model should give you a very good idea about the nature and behavior of the application.</p>

<p>It is in precisely this last point that WordPress most differs.</p>

<h4>The WordPress Data Model</h4>

<p>Out of the box, WordPress comes with <a href="http://codex.wordpress.org/Database_Description">11 tables</a>. I want to focus on two: the &ldquo;posts&rdquo; table, and the &ldquo;postmeta&rdquo; table.</p>

<p>&ldquo;Posts&rdquo; is a bit of a misnomer. In fact, the posts table is a general table for all types of objects. Where in MVC, you&rsquo;d create a &ldquo;products&rdquo; model/table, and a &ldquo;orders&rdquo; model/table, in WordPress, objects of both types would go into the &ldquo;posts&rdquo; table. They&rsquo;d be differentiated by the value in the &ldquo;post_type&rdquo; column, where one would presumably have the &ldquo;products&rdquo; value, while the other would have the value of &ldquo;orders&rdquo;.</p>

<p>Parenthetically, Rails uses a similar convention on a much smaller scale to overcome the lack of support for is_a-like inheritance in database tables (see: Single Table Inheritance).</p>

<p>If you&rsquo;ll look closer at the &ldquo;posts&rdquo; schema, you&rsquo;ll discover that its properties are essentially what any object would require. Kinda. It has properties such as &ldquo;date&rdquo;, &ldquo;date_modified&rdquo;. It also has lots of others that would not always be desired.</p>

<p>The &ldquo;postmeta&rdquo; table is essentially key-value pairings for any custom property your object may have that isn&rsquo;t covered in the &ldquo;posts&rdquo; table. Its schema is (id), post_id, key, and value. So, say your product has a &ldquo;price&rdquo; property, that would go into the postsmeta table like so: post_id = [the product id], key = price, value = [the product price].</p>

<p>In SQL this might be expressed like this: <code>SELECT * FROM posts, postmeta WHERE posts.id = postmeta.post_id</code>, which would return a table with all the properties of that object. (In practice, such a query would break, because the same post_id can have multiple values associated with the same key.)</p>

<h4>Why WordPress Chose Their Data Model</h4>

<div class="img-box right">

  <img class="article-img" src="http://imgs.xkcd.com/comics/physicists.png">

  <br>

  <span class="caption"><a href="http://xkcd.com/793/">XKCD: Physicists</a></span>

</div>


<p>If you look at the entire WordPress database schema, it becomes clear that, at least to begin with, WordPress designed their schema much like a Rails-dev would. Even the decision to keep posts and pages in one table can be justified in pure MVC.</p>

<p>But as WordPress moved farther away from being a tool tailored to blogging to being a general, multi-use CMS / E-commerce / Anything-you-want-it-to-be framework, the core team made the decision to keep 99% of the basic database structure. This is in line with the WordPress way of keeping updates, even major ones, extremely easy on the end-user, something major structural changes would preclude. That, in turn, has certainly been instrumental in making WordPress one of the most popular frameworks, powering some ~18% of the Internet. (Microsoft has adopted a similar strategy, with arguably <a href="http://www.quora.com/Microsoft-Windows/Why-do-people-hate-Windows/answer/Balaji-Viswanathan-2?srid=Xjjv&amp;share=1">worse results</a>. Or <a href="http://en.wikipedia.org/wiki/Usage_share_of_operating_systems">not</a>.)</p>

<h4>Implications</h4>

<p>Many things in the world of programming boil down to personal taste. As a <a href="http://avi.flombaum.com">great man</a> once said, &ldquo;There&rsquo;s no wrong way to do it!&rdquo; Personally, I disagree to an extent, but the point is clear.</p>

<p>Is developing with one data-model over another merely a matter of taste? I would say not. I would also posit that neither one is always right for the job, but they should be considered on a per-project basis.</p>

<p>My initial thoughts on each are so:</p>

<p>On the most simple of levels, the WordPress model is more flexible. Don&rsquo;t want to decide your objects&#8217; properties in advance? No problem. Want to format an entire form submission into json and save. Sure. Multiple values for one &ldquo;column&rdquo;, and return as array. You bet.</p>

<p>The price of that flexibility is paid in efficiency and hardiness. Clearly, queries which require a join run slower than those that don&rsquo;t (although the core team has done a remarkable job caching those queries, enabling WordPress installs that have millions of rows). Also, having constraints at the database level (this column value must be an integer, for example) will certainly be sturdier than the server-side constraints that have to be implemented for WordPress.</p>

<p>But I believe the biggest reason why someone would ultimately choose to go with Rails-like framework is not for the reasons mentioned above, but rather for reasons of beauty alone. A key-value schema is essentially formless. Good models must have form. Great models have great form. And the best are simply breathtakingly beautiful, and with that goes all reasons and reason.</p>

<hr />

<p><em>All Revisions to this document are visible <a href="https://github.com/mendelk/mendelk.github.io/commits/master/blog/2013/06/13/wordpress-vs-mvc/index.html">here</a></em></p>
]]></content>
  </entry>
  
</feed>
